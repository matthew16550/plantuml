name: Release Artifacts

on:
  release:
    types: [created]

env:
  RELEASE_TAG: ${{ github.event.release.tag_name }}
  
jobs:
  jar:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout the released code
        uses: actions/checkout@v2
        with:
          ref: refs/tags/${{ env.RELEASE_TAG }}
          
      - name: Configure Git
        run: |
          git config user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git config user.name  'github-actions[bot]'
          
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 8

      # If this run stores a new cache then the next run will not be able to use it because this is a tag checkout :-(
      # But a cache already created on the default branch (by the CI workflow) will be loaded here.
      # See https://github.com/actions/cache/issues/344
      - name: Load Maven cache
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
        
      # The POM version is usually a -SNAPSHOT at this point, we set it to the requested tag because it will be
      # present inside the JAR so should reflect the actual release tag.
      - name: Set POM version
        run: mvn --batch-mode versions:set "-DnewVersion=${RELEASE_TAG}"

      # We are not skipping tests here.  They are half redundant because tests also run in the CI build
      # but it's possible for a release to be accidentally created from a commit where tests do not pass so
      # running them again here is useful (they do not take up much time).
      #
      # This is a code smell suggesting the CI / Release process can be simplified.  But as a first attempt it is good enough :-)
      - name: Build JAR
        run: mvn --batch-mode -Dmaven.javadoc.skip=true -Dmaven.source.skip=true package

      # See https://docs.github.com/en/rest/reference/repos#upload-a-release-asset
      - name: Upload JAR
        run: |
          upload_url="$(echo '${{ github.event.release.upload_url }}' | sed 's/{.*//' )"
          
          response_code=$(curl \
            --url "${upload_url}?nameX=plantuml-${RELEASE_TAG}.jar" \
            --header 'Accept: application/vnd.github.v3+json' \
            --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'Content-Type: application/java-archive' \
            --data-binary "@target/plantuml-${RELEASE_TAG}.jar" \
            --silent \
            --output target/response.json \
            --write-out '%{http_code}')
            
          cat target/response.json
          echo
          
          if [ ${response_code} -ne 200 ]; then
            echo "\nServer returned status code ${response_code}"
            exit 1
          fi
