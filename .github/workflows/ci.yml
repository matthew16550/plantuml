name: CI

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ snapshot-release-2 ]
    tags: [ v* ]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  # We run the tests on many OS / Java combinations but also the Compile step because some users build
  # their own jars from source, so it is good for CI to check that is working on all combinations.
  build:
    if: "!( github.event_name == 'push' && startsWith(github.event.commits[0].message, '[maven-release-plugin] prepare release ') )"
    strategy:
      fail-fast: false
      matrix:
        #        java_version: [ 8, 11, 17 ]
        #        os: [ macos-10.15,  macos-11, ubuntu-18.04, ubuntu-20.04, windows-2016, windows-2019, windows-2022 ]
        include:
          - release_from_this_build: true
            os: ubuntu-20.04
            java_version: 8
    runs-on: ${{ matrix.os }}
    outputs:
      release_version: ${{ steps.configure_release.outputs.release_version }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up java
        uses: actions/setup-java@v2.3.1
        with:
          java-version: ${{ matrix.java_version }}
          distribution: temurin
          cache: maven

      # Downloading all the dependencies is very log spammy, so we do this in its own step.
      - name: Prime maven cache
        run: mvn --batch-mode dependency:go-offline

      # Compile / Test / Package are separate steps so the reason for any failure is more obvious in GitHub UI
      - name: Compile
        run: mvn --batch-mode compile

      - name: Test
        run: mvn --batch-mode test

# todo release here?
      - name: Package
        if: matrix.release_from_this_build
        run: mvn --batch-mode -DfinalName=plantuml -Dmaven.test.skip=true package

      - name: Upload jar artifacts
        if: matrix.release_from_this_build
        uses: actions/upload-artifact@v2
        with:
          # Using github.run_number here to reduce confusion when downloading & comparing artifacts from several builds  
          name: ${{ github.run_number }}-jars
          path: target/*.jar

      - name: Upload jar artifact (only simple jar - without javadoc or sources)
        if: ${{ matrix.release_from_this_build }}
        uses: actions/upload-artifact@v2
        with:
          name: plantuml-jar
          path: |
            target/*.jar
            !target/*-javadoc.jar
            !target/*-sources.jar

      - name: Configure release job
        id: configure_release
        if: matrix.release_from_this_build
        run: .github/scripts/configure_release_job.sh

  refresh_snapshot:
    needs: [ build ]
    if: "!needs.build.outputs.release_version && github.event_name == 'push' && github.ref == 'refs/heads/snapshot-release-2'"
    concurrency:
      group: refresh_snapshot
    runs-on: ubuntu-latest
    steps:
      - id: config
        uses: actions/github-script@v5
        with:
          script: |
            const script = require('./.github/scripts/configure_snapshot_refresh.js')
            await script({context, core, github}))

      - name: Checkout the repository
        if: steps.config.outputs.sha
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.config.outputs.sha }}

      - name: Download jars from this run
        if: steps.config.outputs.download_from_this_run
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.run_number }}-jars

      - name: Download jars from another run
        if: steps.config.outputs.run_id
        env:
          ARTIFACT_NAME: ${{ steps.config.outputs.artifact_name }}
          GITHUB_TOKEN: ${{ github.token }}
          RUN_ID: ${{ steps.config.outputs.run_id }}
        run: gh run download "${RUN_ID}" -n "${ARTIFACT_NAME}"

      - name: Refresh snapshot release
        if: steps.config.outputs.sha
        env:
          GITHUB_TOKEN: ${{ github.token }}
          RELEASE_SHA: ${{ steps.config.outputs.sha }}
        run: .github/scripts/release_snapshot.sh

  release:
    needs: [ build ]
    if: needs.build.outputs.release_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Download jars
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.run_number }}-jars

      - name: Create release in GitHub
        env:
          GITHUB_TOKEN: ${{ github.token }}
          RELEASE_VERSION: ${{ needs.build.outputs.release_version }}
          RELEASE_SHA: ${{ github.sha }}
          TAG: v${{ needs.build.outputs.release_version }}
        run: .github/scripts/release.sh
