name: CI

on:
  create:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    branches:
      - master
      - snapshot-container
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  workflow_config:
    runs-on: ubuntu-latest
    outputs:
      do_release: ${{ steps.config.outputs.do_release }}
      pom_version: ${{ steps.config.outputs.pom_version }}
    steps:
      - name: Configure workflow
        id: config
        env:
          ACTOR: ${{ github.actor }}
          EVENT_ACTION: ${{ github.event.action }}
          REF_TYPE: ${{ github.event.ref_type }}
          REF: ${{ github.event.ref }}
        run: |
          cat <<-EOF
            ::group::Debug Info
            GITHUB_EVENT_NAME       : '${GITHUB_EVENT_NAME}'
            EVENT_ACTION            : '${EVENT_ACTION}'
            REF_TYPE                : '${REF_TYPE}'
            REF                     : '${REF}'
            ACTOR                   : '${ACTOR}'
            GITHUB_REPOSITORY_OWNER : '${GITHUB_REPOSITORY_OWNER}'
            ::endgroup::
          EOF

          # Do a release when a git tag starting with 'v' has been created by a suitable user.
          # (We match against github.repository_owner as a kludge so that forked repos can release themselves when testing the workflow)

          if [[ "${GITHUB_EVENT_NAME}" == "create" && \
                "${REF_TYPE}" == "tag" && \
                "${REF}" == v* && \
                ( "${ACTOR}" == "arnaudroques" || "${ACTOR}" == "${GITHUB_REPOSITORY_OWNER}" ) \
             ]]; then
            echo "ðŸ“£ This run will release '${REF}'"
            echo "::set-output name=do_release::true"
            echo "::set-output name=pom_version::${REF#v}"  # pom_version is the tag without the 'v' prefix
          else
            echo "This run will NOT make a release"
          fi

  # We run the tests on many OS / Java combinations but also the Compile step because some users build
  # their own jars from source, so it is good for CI to check that is working on all combinations.
  build:
    needs: workflow_config
    strategy:
      fail-fast: false
      matrix:
        #        java_version: [ 8, 11, 17 ]
        #        os: [ macos-10.15,  macos-11, ubuntu-18.04, ubuntu-20.04, windows-2016, windows-2019, windows-2022 ]
        include:
          - release_from_this_build: true
            os: ubuntu-20.04
            java_version: 8
    runs-on: ${{ matrix.os }}
    outputs:
      docker_labels: ${{ steps.release_config.outputs.docker_labels }}
      docker_tags: ${{ steps.release_config.outputs.docker_tags }}
      upload_name: ${{ steps.release_config.outputs.upload_name }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up java
        uses: actions/setup-java@v2.3.1
        with:
          java-version: ${{ matrix.java_version }}
          distribution: temurin
          cache: maven

      # Downloading all the dependencies is very log spammy, so we do this in its own step.
      - name: Prime maven cache
        run: mvn --batch-mode dependency:go-offline

      # POM version is usually a -SNAPSHOT at this point, if this is a release then we use the version derived from the tag
      - name: Set POM version
        if: needs.workflow_config.outputs.do_release == 'true'
        env:
          POM_VERSION: ${{ needs.workflow_config.outputs.pom_version }}
        run: mvn --batch-mode versions:set "-DnewVersion=${POM_VERSION}"

      # Compile / Test / Package are separate steps so the reason for any failure is more obvious in GitHub UI
      - name: Compile
        run: mvn --batch-mode compile

      - name: Test
        run: mvn --batch-mode test

      - name: Package
        if: matrix.release_from_this_build
        run: mvn --batch-mode -Dmaven.test.skip=true package

      - name: Upload jar artifacts
        if: matrix.release_from_this_build
        uses: actions/upload-artifact@v2
        with:
          # Using github.run_number here to reduce confusion when downloading & comparing artifacts from several builds  
          name: ${{ github.run_number }}-jars
          path: target/*.jar

      - name: Configure release
        id: release_config
        if: matrix.release_from_this_build
        run: |
          version="$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)"

          echo "::set-output name=docker_labels:: %0A\
            org.opencontainers.image.description=PlantUML CLI (not plantuml-server).  Beware that SNAPSHOT images are bleeding edge and some will be broken! %0A\
            org.opencontainers.image.created=$(TZ=utc date +'%Y-%m-%dT%H-%M-%SZ') %0A\
            org.opencontainers.image.revision=${{ github.event.pull_request.head.sha || github.sha }} %0A\
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }} %0A\
            org.opencontainers.image.version=${version} %0A\
          "

          echo "::set-output name=docker_tags:: %0A\
            ghcr.io/${{ github.repository }}:SNAPSHOT %0A\
            ghcr.io/${{ github.repository }}:${version} %0A\
            ghcr.io/${{ github.repository }}:sha-${{ github.event.pull_request.head.sha || github.sha }} %0A\
          "

          echo "::set-output name=upload_name::${{ github.run_number }}-jars"

  docker_image:
    needs: [ build ]
    # TODO This might be annoying on forked repos.  Need some real-world examples before thinking further...
    # TODO not always
    if: needs.build.outputs.docker_tags
    runs-on: ubuntu-latest
    steps:
      - name: Login to github container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Download jar artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build.outputs.upload_name }}
          path: target

      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: snapshot.Dockerfile
          push: true
          labels: ${{ needs.build.outputs.docker_labels }}
          tags: ${{ needs.build.outputs.docker_tags }}

  release:
    needs: [ workflow_config, build ]
    if: needs.workflow_config.outputs.do_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Download jar artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build.outputs.upload_name }}

      - name: Create release in GitHub
        env:
          GITHUB_TOKEN: ${{ github.token }}
          POM_VERSION: ${{ needs.workflow_config.outputs.pom_version }}
          TAG: ${{ github.event.ref }}
        run: |
          gh release create "${TAG}" \
            "plantuml-${POM_VERSION}.jar" \
            "plantuml-${POM_VERSION}-javadoc.jar" \
            "plantuml-${POM_VERSION}-sources.jar"
