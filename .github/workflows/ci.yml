name: CI

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    branches:
      - maven-release-from-github
  workflow_dispatch:
    inputs:
      use_sha:
        description: Choose a particular commit to build
        required: false
        default: ""
      release_version:
        description: Version to release
        required: false
        default: ""

defaults:
  run:
    shell: bash

jobs:
  workflow_config:
    runs-on: ubuntu-latest
    outputs:
      do_release: ${{ steps.config.outputs.do_release }}
      do_snapshot_release: ${{ steps.config.outputs.do_snapshot_release }}
      release_version: ${{ steps.config.outputs.release_version }}
      use_sha: ${{ steps.config.outputs.use_sha }}
    steps:
      - name: Configure workflow
        id: config
        uses: actions/github-script@v5
        with:
          script: |
            const MAIN_BRANCH = "maven-release-from-github"

            const AUTHORIZED_RELEASERS = new Set([
            	"arnaudroques",
            	context.repo.owner, // kludge so that forked repos can release themselves when testing the workflow
            ])

            core.info(`context.eventName  '${context.eventName}'`)
            core.info(`context.actor      '${context.actor}'`)
            core.info(`context.ref        '${context.ref}'`)
            core.info(`context.repo.owner '${context.repo.owner}'`)
            // todo print the inputs?

            const workflow_dispatch = context.eventName === "workflow_dispatch"
            const release_version = workflow_dispatch ? context.payload.inputs.release_version : null
            const use_sha = workflow_dispatch ? context.payload.inputs.use_sha : null

            if (release_version && !release_version.match(/^1\.20[0-9][0-9]\.[0-9]+$/))
            	throw new Error(`Invalid release_version '${release_version}'`)

            if (use_sha && !use_sha.match(/^[0-9a-fA-F]{40}$/)) {
            	core.setFailed(`Invalid use_sha '${use_sha}'`)
            	return
            }

            // Which commit to use
            core.setOutput("use_sha", use_sha ? use_sha : github.sha)

            // Release a new version
            if (workflow_dispatch && context.payload.inputs.release_version) {
            	if (!AUTHORIZED_RELEASERS.has(context.actor)) {
            		core.setFailed(`Sorry, '${context.actor}' is not authorized to make a release`)
            		return
            	}

            	if (context.ref !== `refs/heads/${MAIN_BRANCH}`) {
            		core.setFailed(`Releases can only be made from the '${MAIN_BRANCH}' branch`)
            		return
            	}

            	core.notice(`This run will release '${release_version}'`)
            	core.setOutput("do_release", true)
            	core.setOutput("release_version", release_version)
            	return
            }

            // Update the snapshot release
            if (context.ref === `refs/heads/${MAIN_BRANCH}`) {
            	core.notice("This run will update the snapshot release")
            	core.setOutput("do_snapshot_release", true)
            }

  # We run the tests on many OS / Java combinations but also the Compile step because some users build
  # their own jars from source, so it is good for CI to check that is working on all combinations.
  build:
    needs: workflow_config
    strategy:
      fail-fast: false
      matrix:
#        java_version: [ 8, 11, 17 ]
#        os: [ macos-10.15,  macos-11, ubuntu-18.04, ubuntu-20.04, windows-2016, windows-2019, windows-2022 ]
        include:
          - release_from_this_build: true
            os: ubuntu-20.04
            java_version: 8
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.workflow_config.outputs.use_sha }}

      - name: Set up java
        uses: actions/setup-java@v2.3.1
        with:
          java-version: ${{ matrix.java_version }}
          distribution: temurin
          cache: maven

      # Downloading all the dependencies is very log spammy, so we do this in its own step.
      - name: Prime maven cache
        run: mvn --batch-mode dependency:go-offline

      - name: Set POM version
        if: needs.workflow_config.outputs.do_release == 'true'
        env:
          RELEASE_VERSION: ${{ needs.workflow_config.outputs.release_version }}
        run: mvn --batch-mode versions:set "-DnewVersion=${RELEASE_VERSION}"

      # Compile / Test / Package are separate steps so the reason for any failure is more obvious in GitHub UI
      - name: Compile
        run: mvn --batch-mode compile

      - name: Test
        run: mvn --batch-mode test

      # Alas, the repeated "matrix.release_from_this_build" tests are messy but do not see a simple way to avoid them
      # See https://github.com/actions/runner/issues/662

      - name: Setup gpg
        if: matrix.release_from_this_build
        env:
          JAR_SIGNING_KEY: ${{ secrets.JAR_SIGNING_KEY }}
        run: echo "${JAR_SIGNING_KEY}" | gpg --batch --import --import-options import-show

      - name: Package
        if: matrix.release_from_this_build
        env:
          JAR_SIGNING_KEY_ID: ${{ secrets.JAR_SIGNING_KEY_ID }}
          JAR_SIGNING_PASSPHRASE: ${{ secrets.JAR_SIGNING_PASSPHRASE }}
        run: |
          mvn --batch-mode \
            "-Dgpg.keyname=${JAR_SIGNING_KEY_ID}" \
            "-Dgpg.passphrase=${JAR_SIGNING_PASSPHRASE}" \
            "-Dmaven.test.skip=true" \
            package javadoc:jar gpg:sign

      # todo not here?
      - name: Create release tag
        if: matrix.release_from_this_build && needs.workflow_config.outputs.do_release == 'true'
        env:
          RELEASE_VERSION: ${{ needs.workflow_config.outputs.release_version }}
        run: |
          git add pom.xml
          git commit -m "Release ${RELEASE_VERSION}"
          git tag "v${RELEASE_VERSION}"
          git push origin "v${RELEASE_VERSION}"

      - name: Upload artifacts
        if: matrix.release_from_this_build
        uses: actions/upload-artifact@v2
        with:
          # Using github.run_number here to reduce confusion when downloading & comparing artifacts from several builds  
          name: ${{ github.run_number }}-jars
          path: |
            target/*.asc
            target/*.jar
            target/*.pom

  release:
    needs: [ workflow_config, build ]
    if: needs.workflow_config.outputs.do_release == 'true' || needs.workflow_config.outputs.do_snapshot_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.run_number }}-jars

      - name: Create snapshot release
        if: needs.workflow_config.outputs.do_snapshot_release == 'true'
        env:
          GITHUB_TOKEN: ${{ github.token }}
          USE_SHA: ${{ needs.workflow_config.outputs.use_sha }}
        run: .github/scripts/release_snapshot.sh

      - name: Create release in GitHub
        if: needs.workflow_config.outputs.do_release == 'true'
        env:
          GITHUB_TOKEN: ${{ github.token }}
          RELEASE_VERSION: ${{ needs.workflow_config.outputs.release_version }}
        run: .github/scripts/release.sh

        # TODO release to mvn central
