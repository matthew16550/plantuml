name: CI

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ snapshot-release-2 ]
  workflow_dispatch:
    inputs:
      publish_snapshot:
        description: TODO
        required: false
        default: "false"
      release_version:
        description: Version to release
        required: false
        default: ""
      sha:
        description: SHA of commit to build
        required: false
        default: ""

defaults:
  run:
    shell: bash

jobs:
  workflow_config:
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.config.outputs.release_version }}
      publish_sha_versioned_package: ${{ steps.config.outputs.publish_sha_versioned_package }}
    steps:
      - name: Configure workflow
        id: config
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          echo "::set-output name=publish_sha_versioned_package::true}"
          exit
          
          set -x
          #PACKAGE_POM_STATUS=$( curl -o /dev/null --silent --head --write-out '%{http_code}'
          #  "https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@maven.pkg.github.com/${GITHUB_REPOSITORY_OWNER}/plantuml/net/sourceforge/plantuml/plantuml/${GITHUB_SHA}/plantuml-${GITHUB_SHA}.jar"
          #)
        
          cat <<-EOF
          GITHUB_EVENT_NAME       : '${GITHUB_EVENT_NAME}'
          GITHUB_REF_NAME         : '${GITHUB_REF_NAME}'
          GITHUB_REF_TYPE         : '${GITHUB_REF_TYPE}'
          GITHUB_ACTOR            : '${GITHUB_ACTOR}'
          GITHUB_REPOSITORY_OWNER : '${GITHUB_REPOSITORY_OWNER}'
          PACKAGE_POM_STATUS      : '${PACKAGE_POM_STATUS}'
          EOF
        
          if [[ "${GITHUB_EVENT_NAME}" =~ "push|workflow_dispatch" \
                && "${GITHUB_REF_TYPE}" == "branch" && "${GITHUB_REF_NAME}" == "snapshot-release-2" ]]; then
            if [[ "${PACKAGE_POM_STATUS}" == 200 ]]; then
              echo "::notice title=::This run will not publish a sha versioned package because one already exists"
            else
              echo "::notice title=::This run will publish a sha versioned package"
              echo "::set-output name=publish_sha_versioned_package::true}"
            fi
            exit
          fi
       
          # We match against GITHUB_REPOSITORY_OWNER as a kludge so that forked repos can release themselves when testing the workflow
          if [[ "${GITHUB_EVENT_NAME}" == push && "${GITHUB_REF_TYPE}" == "tag" && "${GITHUB_REF_NAME}" == v* \
                && ("${GITHUB_ACTOR}" == "arnaudroques" || "${GITHUB_ACTOR}" == "${GITHUB_REPOSITORY_OWNER}") ]]; then
            RELEASE_VERSION="${GITHUB_REF_NAME#v*}"
            echo "::notice title=::This run will release '${RELEASE_VERSION}'"
            echo "::set-output name=release_version::${RELEASE_VERSION}"
          fi
        
  # We run the tests on many OS / Java combinations but also the Compile step because some users build
  # their own jars from source, so it is good for CI to check that is working on all combinations.
  build:
    needs: [ workflow_config ]
    if: "!( github.event_name == 'push' && startsWith(github.event.commits[0].message, '[maven-release-plugin] prepare release ') )"
    strategy:
      fail-fast: false
      matrix:
        #        java_version: [ 8, 11, 17 ]
        #        os: [ macos-10.15,  macos-11, ubuntu-18.04, ubuntu-20.04, windows-2016, windows-2019, windows-2022 ]
        include:
          - release_from_this_build: true
            os: ubuntu-20.04
            java_version: 8
    runs-on: ${{ matrix.os }}
    outputs:
      release_version: ${{ steps.configure_release.outputs.release_version }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.sha || github.sha }}
#      - name: Set up java
#        uses: actions/setup-java@v2.3.1
#        with:
#          java-version: ${{ matrix.java_version }}
#          distribution: temurin
#          cache: maven

      # Downloading all the dependencies is very log spammy, so we do this in its own step.
#      - name: Prime maven cache
#        run: mvn --batch-mode dependency:go-offline

#      - name: Set pom version
#        if: needs.workflow_config.outputs.set_pom_version
#        env:
#          POM_VERSION: ${{ needs.workflow_config.outputs.set_pom_version }}
#        run: mvn versions:set "-DnewVersion=${POM_VERSION}"

      # Compile / Test / Package are separate steps so the reason for any failure is more obvious in GitHub UI
#      - name: Compile
#        run: mvn --batch-mode compile

#      - name: Test
#        run: mvn --batch-mode test

      - name: Package
        if: matrix.release_from_this_build
        # todo sign
        run: touch plantuml-SNAPSHOT.jar plantuml-SNAPSHOT-javadoc.jar plantuml-SNAPSHOT-sources.jar
#        mvn --batch-mode -Dmaven.test.skip=true package

      - name: Upload artifacts
        if: matrix.release_from_this_build
        uses: actions/upload-artifact@v2
        with:
          # Using github.run_number here to reduce confusion when downloading & comparing artifacts from several builds  
          name: ${{ github.run_number }}-jars
          path: target/*.jar

#  publish_sha_versioned_package:
#    needs: [ workflow_config, build ]
#    if: needs.workflow_config.outputs.publish_sha_versioned_package
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the repository
#        uses: actions/checkout@v2
#
#      - name: Download jars
#        uses: actions/download-artifact@v2
#        with:
#          name: ${{ github.run_number }}-jars

#      - name: Publish to Github Packages
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        run: |
#          mvn --batch-mode package deploy:deploy \
#            "-DaltDeploymentRepository=github::https://maven.pkg.github.com/${GITHUB_REPOSITORY_OWNER}/plantuml" \
#            "-Dmaven.test.skip=true"
#
#          echo "::notice title=::Published 'TODO'"
          
#  refresh_snapshot:
#    needs: [ publish_sha_versioned_package ]
#    concurrency:
#      group: refresh_snapshot
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the repository
#        uses: actions/checkout@v2
#
#      - name: Decide if the snapshot release needs refreshing
#        id: decide
#        uses: actions/github-script@v5
#        with:
#          script: |
#            const script = require('.github/scripts/refresh_snapshot_decide.js')
#            await script({context, core, github})
#
#      - name: Refresh snapshot release
#        if: steps.decide.outputs.new_sha
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#          RELEASE_SHA: ${{ steps.decide.outputs.new_sha }}
#        run: .github/scripts/refresh_snapshot.sh

  release:
    needs: [ workflow_config, build ]
    if: needs.workflow_config.outputs.release_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Download jars
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.run_number }}-jars

      - name: Create release in GitHub
        env:
          GITHUB_TOKEN: ${{ github.token }}
          RELEASE_VERSION: ${{ needs.workflow_config.outputs.release_version }}
          TAG: v${{ needs.workflow_config.outputs.release_version }}
        run: |
          gh release create --target "${GITHUB_SHA}" --title "${TAG}" --notes '' "${TAG}" \
            "plantuml-${RELEASE_VERSION}.jar" \
            "plantuml-${RELEASE_VERSION}-javadoc.jar" \
            "plantuml-${RELEASE_VERSION}-sources.jar"

          echo "::notice title=::Released ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/${TAG} ðŸŽ‰"
