name: CI

on:
  create:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Configure job
        id: config
        run: |
          cat <<-EOF
            ::group::Debug Info
            GITHUB_REF              : '${GITHUB_REF}'
            github.actor            : '${{ github.actor }}'
            github.event_name       : '${{ github.event_name }}'
            github.event.action     : '${{ github.event.action }}'
            github.repository_owner : '${{ github.repository_owner }}'
            ::endgroup::
          EOF
          gh version

          # Do a release when a git tag starting with 'v' has been created by a suitable user.
          # (We match against github.repository_owner as a kludge so that forked repos can release themselves when testing the workflow)
          
          if [[ "${{ github.event_name }}" == "create" \
                && "${GITHUB_REF}" == refs/tags/v* \
                && ( "${{ github.actor }}" == "${{ github.repository_owner }}" || "${{ github.actor }}" == "arnaudroques" ) \
             ]]; then
            pom_version="${GITHUB_REF#refs/tags/v}"    # pom_version is the tag without the 'v' prefix
            echo "ðŸ“£ This run will release version '${pom_version}'"
            echo "::set-output name=do_release::true"
            echo "::set-output name=pom_version::${pom_version}"
          else
            echo "This run will NOT make a release"
          fi

      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up java
        uses: actions/setup-java@v2.3.0
        with:
          java-version: 8
          distribution: temurin
          cache: maven

      # Downloading all the dependencies is very log spammy, so we do this in its own step.
      - name: Prime maven cache
        run: mvn --batch-mode dependency:go-offline

      # POM version is usually a -SNAPSHOT at this point, if this is a release then we set the version derived from the tag
      - name: Set POM version
        if: steps.config.outputs.do_release == 'true'
        run: |
          mvn --batch-mode versions:set '-DnewVersion=${{ steps.config.outputs.pom_version }}'

      # Compile / Test / Package are separate steps so the reason for any failure is more obvious in GitHub UI
      - name: Compile
        run: mvn --batch-mode compile

      - name: Test
        run: mvn --batch-mode test

      - name: Package
        run: mvn --batch-mode -Dmaven.test.skip=true package
  
#      - name: Create release in GitHub
#        uses: softprops/action-gh-release@2d72d869af3bf23602f9593a1e3fd739b80ac1eb  # v0.1.12
#        if: steps.config.outputs.do_release == 'true'
#        with:
#          discussion_category_name: Announcements
#          fail_on_unmatched_files: true
#          files: |
#            target/plantuml-${{ steps.config.outputs.pom_version }}.jar
#            target/plantuml-${{ steps.config.outputs.pom_version }}-javadoc.jar
#            target/plantuml-${{ steps.config.outputs.pom_version }}-sources.jar

      - name: gh
        if: steps.config.outputs.do_release == 'true'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release create 'v${{ steps.config.outputs.pom_version }}' \
            --discussion-category Announcements \
            'target/plantuml-${{ steps.config.outputs.pom_version }}.jar' \
            'target/plantuml-${{ steps.config.outputs.pom_version }}-javadoc.jar' \
            'target/plantuml-${{ steps.config.outputs.pom_version }}-sources.jar'
